snippet html_custom_element "HTML Custom Element" b
class MyElement extends HTMLElement {
  constructor() {
    super()
    // element created
  }

  connectedCallback() {
    // browser calls this method when the element is added to the document
    // (can be called many times if an element is repeatedly added/removed)
  }

  disconnectedCallback() {
    // browser calls this method when the element is removed from the document
    // (can be called many times if an element is repeatedly added/removed)
  }

  static get observedAttributes() {
    return [
      /* array of attribute names to monitor for changes */
    ]
  }

  attributeChangedCallback(name, oldValue, newValue) {
    // called when one of attributes listed above is modified
  }

  adoptedCallback() {
    // called when the element is moved to a new document
    // (happens in document.adoptNode, very rarely used)
  }

  // there can be other element methods and properties
}

// let the browser know that <my-element> is served by our new class
customElements.define("my-element", MyElement)
endsnippet

snippet lit_component "Lit Component Boilerplate" b
import {
  LitElement,
  html,
  css,
} from "https://cdn.jsdelivr.net/gh/lit/dist@2/core/lit-core.min.js"

export class SimpleGreeting extends LitElement {
  static get styles() {
    return css`
      p {
        color: blue;
      }
    `
  }

  static get properties() {
    return {
      name: { type: String },
    }
  }

  constructor() {
    super()
    this.name = "Somebody"
  }

  render() {
    return html`<p>Hello, ${this.name}!</p>`
  }
}

customElements.define("simple-greeting", SimpleGreeting)
endsnippet

snippet divblock "jsx div block with className" b
<div className="">
$0
</div>
endsnippet

snippet divinline "jsx div with className" b
<div className=""></div>
endsnippet

snippet desc "Create describe block" b
describe("Description", () => {
	test("first case", () => {
	expect("something").toEqual("something")
	})
})
endsnippet

snippet scc "Create styled-components" b
const ${1:NAME} = styled.div.attrs({
	className: "",
})\`\`
endsnippet

snippet isc "Import styled-components" b
import styled from "styled-components"
endsnippet

snippet irt "Import React" b
import React from "react"
endsnippet

snippet ipt "Import PropType" b
import PropTypes from "prop-types"
endsnippet

snippet simplePrint "Simple print using p" b
p = function(stuffToPrint) { console.log(stuffToPrint); }
endsnippet

snippet reactFunctionalComponent "Functional component" b
import React from 'react'

export function ${1:NAME}() {
	return(
		<code>${3:JSX}</code>
	);
}
endsnippet

snippet reactStorybookConfig "Storybook config" b
/* eslint-disable import/no-extraneous-dependencies, import/no-unresolved, import/extensions */

import { configure } from '@storybook/react';
import '../src/styles/tachyons.min.css'
import '../src/styles/global.js'

const req = require.context('../src/', true, /\.stories\.js$/)

function loadStories() {
  req.keys().forEach((filename) => req(filename))
}

configure(loadStories, module);
endsnippet

snippet reactStory "Storybook template" b
import React from 'react';
import { storiesOf } from '@storybook/react';
import { action } from '@storybook/addon-actions';
import { MemoryRouter } from 'react-router'

import { ${1:NAME} } from './${2:index}'

storiesOf('${4:NAME}', module)
  .addDecorator(story => <MemoryRouter initialEntries={['/']}>{story()}</MemoryRouter>)
  .add('Default', () => <${3:NAME} />)
endsnippet

snippet reactStyledComponent "Styled Components" b
const ${1:NAME} = styled.div.attrs({
  className: ''
})\`\`
endsnippet

snippet reactPackageStyledComponents "Package: styled-components" b
import styled from 'styled-components'
endsnippet

snippet reactPackageNavLink "Package: NavLink from react-router-dom" b
import { NavLink } from 'react-router-dom'
endsnippet
