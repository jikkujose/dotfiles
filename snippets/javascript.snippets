snippet animation "StoryMotion Animation" b
document.querySelector("#sb-video-player").innerHTML = \`
      <div id="scene" class="relative bg-yellow-300 w-full h-full c">
        <div class="bg-white w-48 h-48 rounded-lg"></div>
      </div>
    \`
const timeline = anime
  .timeline({
    autoplay: false,
  })
  .add({
    targets: "#scene div",
    rotate: "1turn",
    easing: "easeInQuad",
    duration: 2000,
  })
endsnippet


snippet alpine_store_init "Alpine Store Init" b
import Alpine from "https://cdn.skypack.dev/alpinejs@3.10.2"

Alpine.store("app", {
  message: "Hola!",
  handleClick() {
    this.message = "Rapid Ready!"
  },
})

Alpine.start()
endsnippet

snippet vercel_api_hanlder "Vercel API handler" b
export default function handler(req, res) {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  res.setHeader('Access-Control-Allow-Credentials', 'true');

  // Handle preflight requests (OPTIONS method)
  if (req.method === 'OPTIONS') {
    res.status(204).end();
    return;
  }

  res.status(200).json({ status: "CORS OKAY"});
}
endsnippet


snippet divblock "jsx div block with className" b
<div className="">
$0
</div>
endsnippet

snippet divinline "jsx div with className" b
<div className=""></div>
endsnippet

snippet desc "Create describe block" b
describe("Description", () => {
	test("first case", () => {
	expect("something").toEqual("something")
	})
})
endsnippet

snippet scc "Create styled-components" b
const ${1:NAME} = styled.div.attrs({
	className: "",
})\`\`
endsnippet

snippet isc "Import styled-components" b
import styled from "styled-components"
endsnippet

snippet irt "Import React" b
import React from "react"
endsnippet

snippet ipt "Import PropType" b
import PropTypes from "prop-types"
endsnippet

snippet simplePrint "Simple print using p" b
p = function(stuffToPrint) { console.log(stuffToPrint); }
endsnippet

snippet reactFunctionalComponent "Functional component" b
import React from 'react'

export function ${1:NAME}() {
	return(
		<code>${3:JSX}</code>
	);
}
endsnippet

snippet reactStorybookConfig "Storybook config" b
/* eslint-disable import/no-extraneous-dependencies, import/no-unresolved, import/extensions */

import { configure } from '@storybook/react';
import '../src/styles/tachyons.min.css'
import '../src/styles/global.js'

const req = require.context('../src/', true, /\.stories\.js$/)

function loadStories() {
  req.keys().forEach((filename) => req(filename))
}

configure(loadStories, module);
endsnippet

snippet reactStory "Storybook template" b
import React from 'react';
import { storiesOf } from '@storybook/react';
import { action } from '@storybook/addon-actions';
import { MemoryRouter } from 'react-router'

import { ${1:NAME} } from './${2:index}'

storiesOf('${4:NAME}', module)
  .addDecorator(story => <MemoryRouter initialEntries={['/']}>{story()}</MemoryRouter>)
  .add('Default', () => <${3:NAME} />)
endsnippet

snippet reactStyledComponent "Styled Components" b
const ${1:NAME} = styled.div.attrs({
  className: ''
})\`\`
endsnippet

snippet reactPackageStyledComponents "Package: styled-components" b
import styled from 'styled-components'
endsnippet

snippet reactPackageNavLink "Package: NavLink from react-router-dom" b
import { NavLink } from 'react-router-dom'
endsnippet
